#include "unity.h"

#include "JsonWriter.h"

char buff[256];

void test_utf8() {
  JsonBufferWriter writer(buff, sizeof(buff));
  writer.beginObject();
    writer["–º–æ—Ä–¥–∞"] = "üòÅ";
  writer.endObject();

  TEST_ASSERT_EQUAL_INT(21, writer.dataSize());
  TEST_ASSERT_EQUAL_MEMORY(R"json({"–º–æ—Ä–¥–∞":"üòÅ"})json",
                           writer.buffer(), writer.dataSize());
}

void test_multiline() {
  JsonBufferWriter writer(buff, sizeof(buff));
  writer.beginObject();
    writer["—Å–ø–µ—Ü"]  = "\"–ø—Ä–∏–≤—ñ—Ç\n—Å–≤—ñ—Ç\"\t\nüòÅ\\\\\\";
  writer.endObject();

  TEST_ASSERT_EQUAL_INT(55, writer.dataSize());
  TEST_ASSERT_EQUAL_MEMORY(R"json({"—Å–ø–µ—Ü":"\"–ø—Ä–∏–≤—ñ—Ç\n—Å–≤—ñ—Ç\"\t\nüòÅ\\\\\\"})json",
                           writer.buffer(), writer.dataSize());
}

void test_ascii_only() {
  JsonBufferWriter writer(buff, sizeof(buff));
  writer.setAsciiOnly();
  writer.beginObject();
    writer["ascii"]  = "—Ç—É—Ç ASCII —Ç—ñ–ª—å–∫–∏ üòÅ";
  writer.endObject();

  TEST_ASSERT_EQUAL_INT(42, writer.dataSize());
  TEST_ASSERT_EQUAL_MEMORY(R"json({"ascii":"—Ç—É—Ç ASCII —Ç—ñ–ª—å–∫–∏ üòÅ"})json",
                           writer.buffer(), writer.dataSize());
}

int runUnityTests(void) {
  UNITY_BEGIN();
  RUN_TEST(test_utf8);
  RUN_TEST(test_multiline);
  RUN_TEST(test_ascii_only);
  return UNITY_END();
}


void setup() {
  delay(1000);

  runUnityTests();
}

void loop() {
}
